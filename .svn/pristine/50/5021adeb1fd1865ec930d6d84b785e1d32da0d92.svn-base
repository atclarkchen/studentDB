// This is a SUGGESTED skeleton for a class that describes a single
// Condition (such as CCN = '99776').  You can throw this away if you
// want,  but it is a good idea to try to understand it first.
// Our solution changes or adds about 30 lines in this skeleton.

// Comments that start with "//" are intended to be removed from your
// solutions.
package db61b;

import java.io.PrintStream;
import java.util.List;
import java.util.Scanner;

/** Represents a single 'where' condition in a 'select' command.
 *  @author */
class Condition {

    /** A Condition representing COL1 RELATION COL2, where COL1 and COL2
     *  are column designators. and RELATION is one of the
     *  strings "<", ">", "<=", ">=", "=", or "!=". */
	
	/*
	 * compare each element in col1 with each element in col2 using the given relation
	 */
    Condition(Column col1, String relation, Column col2) {
        // YOUR CODE HERE
    	this._col1 = col1;
    	this._col2 = col2;
    	_relation = relation;	
    }

    /** A Condition representing COL1 RELATION 'VAL2', where COL1 is
     *  a column designator, VAL2 is a literal value (without the
     *  quotes), and RELATION is one of the strings "<", ">", "<=",
     *  ">=", "=", or "!=".
     */
    Condition(Column col1, String relation, String val2) {
        this(col1, relation, (Column) null);
        _val2 = val2;
    }

    /** Assuming that ROWS are rows from the respective tables from which
     *  my columns are selected, returns the result of performing the test I
     *  denote. */
    //Note confusion stems from 1 boolean returned:
    //if i am a one column condition, if someone runs a test than there is exactly one row (because I'm looking at one value)
    //say i have 2 columns (from two different tables), then i have 2 rows if someone runs test
    	// Lastname > Firstname, I compare LastName rowA with FirstName rowB
    boolean test(Row... rows) {
        // REPLACE WITH SOLUTION
    	int compare;
    	if (_col2 == null) {
    		compare = _col1.getFrom(rows).compareTo(_val2);
    	}
    	else {
    		compare = _col1.getFrom(rows).compareTo(_col2.getFrom(rows));
    	}
    	//if dealing with 2 columns, so I could have either 1 or 2 rows. But using getFrom allows
    		//us to find the right table from the row(s) we are given

		switch(_relation) {
    		case "<=":
    			return compare <= 0;
    		case ">=":
    			return compare >= 0;
    		case "=":
    			return compare == 0;
    		case ">":
    			return compare > 0;
    		case "<":
    			return compare < 0;
    		case "!=":
    			return !(compare == 0);
    		}
		return false;
		}

    /** Return true iff ROWS satisfies all CONDITIONS. */
    static boolean test(List<Condition> conditions, Row... rows) {
        for (Condition cond : conditions) {
            if (!cond.test(rows)) {
                return false;
            }
        }
        return true;
    }
    
    public Column getCol1() {
    	return _col1;
    }
    
    public Column getCol2() {
    	return _col2;
    }
    
    public String getVal2() {
    	return _val2;
    }
    
    public String getRelation() {
    	return _relation;
    }
    /** The operands of this condition.  _col2 is null if the second operand
     *  is a literal. */
    private Column _col1, _col2;
    /** Second operand, if literal (otherwise null). */
    private String _val2;
    // ADD ADDITIONAL FIELDS HERE
    private String _relation;
}
