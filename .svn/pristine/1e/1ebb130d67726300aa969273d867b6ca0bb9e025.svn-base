// This is a SUGGESTED skeleton for a class that parses and executes database
// statements.  Be sure to read the STRATEGY section, and ask us if you have any
// questions about it.  You can throw this away if you want, but it is a good
// idea to try to understand it first.  Our solution adds or changes about 50
// lines in this skeleton.

// Comments that start with "//" are intended to be removed from your
// solutions.
package db61b;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Scanner;

import static db61b.Utils.*;
import static db61b.Tokenizer.*;

/** An object that reads and interprets a sequence of commands from an
 *  input source.
 *  @author */
class CommandInterpreter {

    /* STRATEGY.
     *
     *   This interpreter parses commands using a technique called
     * "recursive descent." The idea is simple: we convert the BNF grammar,
     * as given in the specification document, into a program.
     *
     * First, we break up the input into "tokens": strings that correspond
     * to the "base case" symbols used in the BNF grammar.  These are
     * keywords, such as "select" or "create"; punctuation and relation
     * symbols such as ";", ",", ">="; and other names (of columns or tables).
     * All whitespace and comments get discarded in this process, so that the
     * rest of the program can deal just with things mentioned in the BNF.
     * The class Tokenizer performs this breaking-up task, known as
     * "tokenizing" or "lexical analysis."
     *
     * The rest of the parser consists of a set of functions that call each
     * other (possibly recursively, although that isn't needed for this
     * particular grammar) to operate on the sequence of tokens, one function
     * for each BNF rule. Consider a rule such as
     *
     *    <create statement> ::= create table <table name> <table definition> ;
     *
     * We can treat this as a definition for a function named (say)
     * createStatement.  The purpose of this function is to consume the
     * tokens for one create statement from the remaining token sequence,
     * to perform the required actions, and to return the resulting value,
     * if any (a create statement has no value, just side-effects, but a
     * select clause is supposed to produce a table, according to the spec.)
     *
     * The body of createStatement is dictated by the right-hand side of the
     * rule.  For each token (like create), we check that the next item in
     * the token stream is "create" (and report an error otherwise), and then
     * advance to the next token.  For a metavariable, like <table definition>,
     * we consume the tokens for <table definition>, and do whatever is
     * appropriate with the resulting value.  We do so by calling the
     * tableDefinition function, which is constructed (as is createStatement)
     * to do exactly this.
     *
     * Thus, the body of createStatement would look like this (_input is
     * the sequence of tokens):
     *
     *    _input.next("create");
     *    _input.next("table");
     *    String name = name();
     *    Table table = tableDefinition();
     *    _input.next(";");
     *
     * plus other code that operates on name and table to perform the function
     * of the create statement.  The .next method of Tokenizer is set up to
     * throw an exception (DBException) if the next token does not match its
     * argument.  Thus, any syntax error will cause an exception, which your
     * program can catch to do error reporting.
     *
     * This leaves the issue of what to do with rules that have alternatives
     * (the "|" symbol in the BNF grammar).  Fortunately, our grammar has
     * been written with this problem in mind.  When there are multiple
     * alternatives, you can always tell which to pick based on the next
     * unconsumed token.  For example, <table definition> has two alternative
     * right-hand sides, one of which starts with "(", and one with "as".
     * So all you have to do is test:
     *
     *     if (_input.nextIs("(")) {
     *         _input.next("(");
     *         // code to process "<column name>,  )"
     *     } else {
     *         // code to process "as <select clause>"
     *     }
     *
     * As a convenience, you can also write this as
     *
     *     if (_input.nextIf("(")) {
     *         // code to process "<column name>,  )"
     *     } else {
     *         // code to process "as <select clause>"
     *     }
     *
     * combining the calls to .nextIs and .next.
     *
     * You can handle the list of <column name>s in the preceding in a number
     * of ways, but personally, I suggest a simple loop:
     *
     *     ... = columnName();
     *     while (_input.nextIs(",")) {
     *         _input.next(",");
     *         ... = columnName();
     *     }
     *
     * or if you prefer even greater concision:
     *
     *     ... = columnName();
     *     while (_input.nextIf(",")) {
     *         ... = columnName();
     *     }
     *
     * (You'll have to figure out what do with the names you accumulate, of
     * course).
     */


    /** A new CommandInterpreter executing commands read from INP, writing
     *  prompts on PROMPTER, if it is non-null. */
    CommandInterpreter(Scanner inp, PrintStream prompter) {
        _input = new Tokenizer(inp, prompter);
        _database = new Database();
    }

    /** Parse and execute one statement from the token stream.  Return true
     *  iff the command is something other than quit or exit. */
    boolean statement() {
        switch (_input.peek()) {
        case "create":
            createStatement();
            break;
        case "load":
            loadStatement();
            break;
        case "exit": case "quit":
            exitStatement();
            return false;
        case "*EOF*":
            return false;
        case "insert":
            insertStatement();
            break;
        case "print":
            printStatement();
            break;
        case "select":
            selectStatement();
            break;
        case "store":
            storeStatement();
            break;
        default:
            throw error("unrecognizable command");
        }
        return true;
    }

    /** Parse and execute a create statement from the token stream. */
    void createStatement() {
        _input.next("create");//CREATE
        _input.next("table");//TABLE
        String name = name();//NAME
        Table table = tableDefinition();//TABLE DEFINITION
        _input.next(";");
        // FILL IN CODE TO EXECUTE THE STATEMENT
        _database.put(name, table);
    }

    /** Parse and execute an exit or quit statement. Actually does nothing
     *  except check syntax, since statement() handles the actual exiting. */
    void exitStatement() {
        if (!_input.nextIf("quit")) {
            _input.next("exit");
        }
        _input.next(";");
    }

    /** Parse and execute an insert statement from the token stream. */
    /** What does this do:
     * tokenizes and puts command into _input. Checks to see if it matches (using .next() ).
     * ArrayList of Strings. Add "next" of _input into arrayList.
     * Convert ArrayList into Array and create a row.
     * Add row to Table.
     */
    void insertStatement() {
        _input.next("insert");
        _input.next("into");
        Table table = tableName();
        _input.next("values");

        ArrayList<String> values = new ArrayList<>();
        values.add(literal());
        while (_input.nextIf(",")) {
            values.add(literal());
        }
        _input.next(";");

        table.add(new Row(values.toArray(new String[values.size()])));
    }

    /** Parse and execute a load statement from the token stream. */
    /** What does this do:
     *      Load data from the file name.db to create a table named table.
     */
    void loadStatement() {
        // FILL THIS IN
        _input.next("load");
        String name = name();
        Table table = Table.readTable(name);
        _input.next(";");
        this._database.put(name, table);//put("name",Table). set or replace the table named "whatever user passed in" with table.
        System.out.printf("Loaded %s.db%n", name);
    }

    /** Parse and execute a store statement from the token stream. */
    void storeStatement() {
        _input.next("store");
        String name = _input.peek();
        Table table = tableName();
        _input.next(";");
        // FILL THIS IN
        table.writeTable(name);
        
        System.out.printf("Stored %s.db%n", name);
    }

    /** Parse and execute a print statement from the token stream. */
    void printStatement() {
        _input.next("print");
        String name = _input.peek();
        Table table = this.tableName();
        System.out.printf("Contents of %s:%n", name);
        table.print();
        _input.next(";");
    }

    /** Parse and execute a select statement from the token stream. */
    /*
     * <select clause>; Select clauses are described below. They represent tables created from
    other tables. When used alone as a statement (terminated by a semicolon), they indicate
    that the resulting table is to be printed, using the format described above for the print command
     */
    
    // call selectClause
    //Table selected = selectClause()
    //selectClause --> parse the next select clause and return the selected table based on conditions
    //selected.print()
    //different cases are in selectClause()
    void selectStatement() {
        // FILL THIS IN
    	
        Table selected = this.selectClause();
        System.out.println("Search results:");
        selected.print();
        _input.next(";");
    }

    /** Parse and execute a table definition, returning the specified
     *  table. */
    Table tableDefinition() {
        Table table;
        if (_input.nextIf("(")) {//has column names
            // REPLACE WITH SOLUTION
            
            LinkedHashSet<String> columnNames = new LinkedHashSet<String>();
            //create first column (possibly more)
            String columnName = columnName();
            columnNames.add(columnName);
            while (_input.nextIf(",")) {//if next is "," ADD COLNAME to list in order
            	String c = columnName();
            	columnNames.add(c);
            }
            String[] colNames = columnNames.toArray(new String[columnNames.size()]);
            table = new Table(colNames);
           _input.next(")");
        } else {//"AS" CASE --> next thing IS SELECTCLAUSE
            // REPLACE WITH SOLUTION

            //the table == select clause();
        	_input.next("as");
        	table = this.selectClause();
        }
        //_input.next(";");
        return table;
    }

    /** Parse and execute a select clause from the token stream, returning the
     *  resulting table. */
    
    //Case 1:
    /*
     select <column name>+, from <table name> <condition clause> 
         A new (unnamed) table consisting of the named columns from the given table from all rows that satisfy the
        condition clause.
     */
    
    //Case 2:
    /* select <column name>+, from <table name> , <table name> <condition clause>
        A new (unnamed) table consisting of the given columns from all rows of the natural inner join
        of the two tables that satisfy the condition clause. A natural inner join is a table whose
        rows are formed by combining pairs of rows, one from the first table and one from the
        second, such that any columns that have the same name in both tables also have the
        same value
     */
    
    //some reason there is a difference between "select SID from students;" and "select SID from students ;"
    Table selectClause() {
       // REPLACE WITH SOLUTION
        _input.next("select");
    	int tableCount = 0;
        Table rtn;
        Table[] tableArray = new Table[2]; //max number of tables is 2.
        ArrayList<String> columns = new ArrayList<String>();
        
        columns.add(columnName());//adds first column name
        while (_input.nextIf(",")) {
            columns.add(columnName());//adds other possible column names
        }
        _input.next("from");

        Table t1 = this.tableName();
        Table t2 = null;
        tableCount += 1;
        tableArray[0] = t1;
        if (_input.nextIf(",")) {//then there is a 2nd table (INSTEAD OF LOOKING FOR WHERE. IF NO "WHERE", STILL MIGHT BE SECOND TABLE)
        	 t2 = this.tableName();
             tableCount += 1;
             tableArray[1] = t2;
        }

        //call condition clause (regardless of whether or not "next" is "where")
        ArrayList<Condition> conditions;
        if (tableCount == 2) {//2 table select
        	conditions = this.conditionClause(t1, t2);
        	rtn = tableArray[0].select(tableArray[1], columns, conditions);
        	return rtn;
        }
        else {//1 table select
        	conditions = this.conditionClause(t1);
        	rtn = tableArray[0].select(columns, conditions);
        	//rtn.print();
        	return rtn;
        }
    }

    /** Parse and return a valid name (identifier) from the token stream. */
    String name() {
        return _input.next(Tokenizer.IDENTIFIER);
    }

    /** Parse and return a valid column name from the token stream. Column
     *  names are simply names; we use a different method name to clarify
     *  the intent of the code. */
    String columnName() {
        return name();
    }

    /** Parse a valid table name from the token stream, and return the Table
     *  that it designates, which must be loaded. */
    Table tableName() {
        String name = name();
        Table table = _database.get(name);
        if (table == null) {
            throw error("unknown table: %s", name);
        }
        return table;
    }

    /** Parse a literal and return the string it represents (i.e., without
     *  single quotes). */
    String literal() {
        String lit = _input.next(Tokenizer.LITERAL);
        return lit.substring(1, lit.length() - 1).trim();
    }

    /** Parse and return a list of Conditions that apply to TABLES from the
     *  token stream.  This denotes the conjunction (`and') zero
     *  or more Conditions. */
    /*
     * starts with "where" and condition is separated by "and"
     * Calls Condition for each one and puts the constructed Condition into ArrayList
     */
    ArrayList<Condition> conditionClause(Table... tables) {
        //return null;        // REPLACE WITH SOLUTION
        ArrayList<Condition> rtn = new ArrayList<Condition>();
        
        //if condition clause is empty, just return an empty list
        if (_input.nextIs(";")) {
        	return null;
        }
        if (_input.nextIf("where")) {//if next thing is "where" skip "where": CONDITION TIME
            //make each CONDITION (parse and find arguments: col1, relation, col2, OR col1, relation, val2)
        	
        	//make very first condition
        	Condition first = this.condition(tables);
        	rtn.add(first);
        }//(possible) multiple conditions do later!
        while (_input.nextIf("and")) {
            Condition c = this.condition(tables);
            rtn.add(c);
        }
        return rtn;
    }

    /** Parse and return a Condition that applies to TABLES from the
     *  token stream. */
    /*
     * this gets called by ConditionClause. 
     */
    Condition condition(Table... tables) {
        Column col1 = null;
        String col1Name;
        Column col2 = null;
        String col2Name;
        String val2 = "";//by default, val2 is empty
        String relation;
        
        col1Name = this.columnName();//first thing is ALWAYS COLUMN1
        //System.out.println("col1name from CONDITION is: " + col1Name);
        col1 = new Column(col1Name, tables);

        relation = _input.next(RELATION);
        
        if (_input.nextIs(LITERAL)) {//then the next thing is _val2 and NOT COL2
        	//System.out.println("val2 from CONDITION is: " + val2);
            //val2 = _input.next(LITERAL); POSSIBLE MISTAKE
        	val2 = literal();
        } else {//create col2
            col2Name = this.columnName();
            //System.out.println("col2name from CONDITION is: " + col2);
            col2 = new Column(col2Name, tables);
        }
        if (val2.equals("")) {//means VAL2 IS EMPTY so we use COL1 AND COL2
            Condition rtn = new Condition(col1, relation, col2);
            return rtn;
        } else {//USE COL1, RELATION, VAL2
            Condition rtn = new Condition(col1, relation, val2);
            return rtn;
        }
    }

    /** Advance the input past the next semicolon. */
    void skipCommand() {
        while (!_input.nextIf(";") && !_input.nextIf("*EOF*")) {
            _input.next();
        }
    }

    /** The command input source. */
    private Tokenizer _input;
    /** Database containing all tables. */
    private Database _database;
}
